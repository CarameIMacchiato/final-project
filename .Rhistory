user.data <- general.data()
paste0("Selected User: ", user.data$username)
})
# check for correct response for full name
output$search.fullname <- renderText({
user.data <- general.data()
paste0("Full name : ", user.data$full_name)
})
# check for correct response for user id
output$search.userid <- renderText({
user.data <- general.data()
paste0("User Id: ", user.data$id)
})
# check for correct response for user bio
output$search.user.bio <- renderText({
user.data <- general.data()
paste0("Bio: ", user.data$bio)
})
# Username for profile page
output$selected.user <- renderText({
user.data <- general.data()
paste(user.data$username)
})
# Count of followees for profile page
output$following <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$follows)
})
# Count of followers for profile page
output$follows <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$followed_by)
})
# Count of media count for profile page
output$media.count <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$media)
})
# Name for profile page
output$name <- renderText({
user.data <- general.data()
paste(user.data$full_name)
})
# Count of media count for profile page
output$bio <- renderText({
user.data <- general.data()
paste(user.data$bio)
})
# Profile pic for profile page # Here too.
output$pic <- renderUI({
user.data <- general.data()
tags$img(imageOutput('pic'), src = user.data$profile_pic)
})
output$maps <- renderLeaflet({
map.final <- map.stuff()
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng= map.final$long, lat= map.final$lat, popup= paste(sep = "<br>", map.final$links, paste0("<b><i>", map.final$usernames, "</i></b>"), map.final$captions),
clusterOptions = markerClusterOptions())
m  # Print the map
})
}
shinyServer(server)
runApp()
shiny::runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> master
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(jsonlite)
library(anytime)
library(httr)
library(plotly)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = media.result, aes(x = Image, y = LIKEs, fill = factor(Comments), label = Time, label2 = LIKEs, label3 = Comments)) +
geom_bar(stat = "identity", color = "purple") +
labs(x = "Image #", y = ("LIKES"), fill = "Comments") +
scale_x_discrete(limits = 1:nrow(media.result))
runApp()
runApp()
runApp()
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=a", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=a", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
library(shinydashboard)
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=a", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=a", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
shiny::runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
library(leaflet)
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shinydashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
library(leaflet)
runApp()
runApp()
shiny::runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(shinydashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
install.packages("leaflet")
install.packages("plotly)
# Sourcing the file with the keys in it. Access key is 'access.token'
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
# Format is base url / request / access key
# In case : 6ff7a923483441ea8b19c9ecd8b23d5a
# Get user info
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=a", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
server <- function(input, output) {
## General data for first user
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
return(data)
})
## General data for second user
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data.2 <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search.2, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=onaregul", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
return(data)
})
## Recent media for first user
# for user's recent media
recent.media <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
## Recent media for second user
recent.media.2 <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search.2, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=onaregul", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
## Specific counts for first user
# for more specific user data (followers, following, etc.)
specific.counts <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
## Specific counts for second user
specific.counts.2 <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search.2, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=onaregul", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
## Map for the first user
# Creation of data for leaflet map for the searched user
map.stuff <- reactive({
media.frame <- data.frame(recent.media())
long <- if(!exists("long")) long <- media.frame$location$longitude else append( long, body.pics$data$location$longitude)
lat <- if(!exists("lat")) lat <- media.frame$location$latitude else append( lat, body.pics$data$location$latitude)
links <- if(!exists("links")) links <- (paste0("<img src=\"", media.frame$images$thumbnail$url, "\">")) else append( links, (paste0("<img src=\"", body.pics$data$images$thumbnail$url, "\">")))
install.packages("plotly)
# Sourcing the file with the keys in it. Access key is 'access.token'
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
# Format is base url / request / access key
# In case : 6ff7a923483441ea8b19c9ecd8b23d5a
# Get user info
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=a", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
server <- function(input, output) {
## General data for first user
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
return(data)
})
## General data for second user
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data.2 <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search.2, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=onaregul", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
return(data)
})
## Recent media for first user
# for user's recent media
recent.media <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
## Recent media for second user
recent.media.2 <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search.2, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=onaregul", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
## Specific counts for first user
# for more specific user data (followers, following, etc.)
specific.counts <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=acccelgor", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
## Specific counts for second user
specific.counts.2 <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search.2, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
if(length(search.body$data) == 0){
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=onaregul", "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
}
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
## Map for the first user
# Creation of data for leaflet map for the searched user
map.stuff <- reactive({
media.frame <- data.frame(recent.media())
long <- if(!exists("long")) long <- media.frame$location$longitude else append( long, body.pics$data$location$longitude)
lat <- if(!exists("lat")) lat <- media.frame$location$latitude else append( lat, body.pics$data$location$latitude)
links <- if(!exists("links")) links <- (paste0("<img src=\"", media.frame$images$thumbnail$url, "\">")) else append( links, (paste0("<img src=\"", body.pics$data$images$thumbnail$url, "\">")))
install.packages("plotly")
library(plotly)
library(leaflet)
runApp()
""
"
q
:q
