scale_x_discrete(labels=c("High", "Moderate", "Low", "None"))+
geom_bar(mapping = aes(x = reorder(Web.Programming.Experience, -(Web.Programming.Experience), y = 1, fill = Interested.in.Informatics), stat = "Identity")) +
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(labels=c("High", "Moderate", "Low", "None"))+
geom_bar(mapping = aes(x = reorder(Web.Programming.Experience, -(Web.Programming.Experience), y = 1, fill = Interested.in.Informatics), stat = "Identity")) +
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
order = c("I have lots of experience with a programming language (e.g., CSE143+)", "I have moderate experience with a programming language (e.g., CSE142)", "I've experimented with simple programming", "I've never written code", "Expert User", "Intermediate user", "Used it a few times", "Never used it")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = , y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
order = c("I have lots of experience with a programming language (e.g., CSE143+)", "I have moderate experience with a programming language (e.g., CSE142)", "I've experimented with simple programming", "I've never written code", "Expert User", "Intermediate user", "Used it a few times", "Never used it")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = , y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = , y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete()+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = , y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
order = c("I have lots of experience with a programming language (e.g., CSE143+)", "I have moderate experience with a programming language (e.g., CSE142)", "I've experimented with simple programming", "I've never written code", "Expert user", "Intermediate user", "Used it a few times", "Never used it")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
order = c("I have lots of experience with a programming language (e.g., CSE143+)", "I have moderate experience with a programming language (e.g., CSE142)", "I've experimented with simple programming", "I've never written code", "Expert user", "", "Intermediate user", "Used it a few times", "Never used it")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order,
Labels)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
order = c("I have lots of experience with a programming language (e.g., CSE143+)", "I have moderate experience with a programming language (e.g., CSE142)", "I've experimented with simple programming", "I've never written code", "", "Expert user", "Intermediate user", "Used it a few times", "Never used it")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order)+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience and Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order,
labs = c("High"))+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience vs. Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order,
labels = c("High"))+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience vs. Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
ggplot(data = intro.survey) +
# Creates a bar chart
geom_bar(mapping = aes(x = Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
geom_bar(mapping = aes(x = Web.Programming.Experience, y = 1, fill = Interested.in.Informatics), stat = "Identity") +
# Adds a color scheme
scale_fill_brewer(palette = "RdYlBu") +
# Adds labels, scales, and titles
scale_x_discrete(limits = order,
labels = c("High", "Moderate", "Low", "None", "Divide", "High", "Moderate", "Low", "None"))+
labs( title = "Student Programming Experience vs. Student Interest in Informatics",
x = " Overall Programming Experience vs. Web Programming Experience",
y = "Students",
fill = "Interest in Informatics")
install.packages("shiny")
library(shiny)
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="what is you name?")
)
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="what is you name?")
)
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="what is you name?")
)
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
}
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.servxer)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
sliderInput('slide.key', label = "Pick a number", min = 1, max = 20, value = 12)
)
my.server <- function(input, output) {
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
textInput('user.name', label = "Whats yo name")
sliderInput('slide.key', label = "Pick a number", min = 1, max = 20, value = 12)
)
my.ui <- fluidPage(
textInput('user.name', label = "Whats yo name"),
sliderInput('slide.key', label = "Pick a number", min = 1, max = 20, value = 12)
)
my.ui <- fluidPage(
textInput('user.name', label = "Whats yo name?"),
sliderInput('slide.key', label = "Whats yo number?", min = 1, max = 20, value = 12)
)
my.server <- function(input, output) {
output$message <- renderText({
my.message <- paste("Can I haaavvveee it?", input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
textInput('user.name', label = "Whats yo name?"),
sliderInput('slide.key', label = "Whats yo number?", min = 1, max = 20, value = 12)
)
my.server <- function(input, output) {
output$message <- renderText({
my.message <- paste("Can I haaavvveee it?", input$user.name)
print(my.message)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
textInput('user.name', label = "Whats yo name?"),
sliderInput('slide.key', label = "Whats yo number?", min = 1, max = 20, value = 12),
textOutput('message')
)
my.server <- function(input, output) {
output$message <- renderText({
my.message <- paste("Can I haaavvveee it?", input$user.name)
print(my.message)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput(label = "Price ($)", value = 0, min = 0),
numericInput(label = "Quantity", value = 1, min = 1)
)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput(label = "Price ($)", value = 0, min = 0),
numericInput(label = "Quantity", value = 1, min = 1)
)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1)
)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
b("Cost")
)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost")
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost<- value * cost
print(my.message)
return(my.message)
})
}
shinyApp(new.ui, new.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput('cost')
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost<- value * cost
return(the.cost)
})
}
shinyApp(new.ui, new.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput('cost')
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost<- price * cost
return(the.cost)
})
}
shinyApp(new.ui, new.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput('cost')
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost<- price * quantity
return(the.cost)
})
}
shinyApp(new.ui, new.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput('cost')
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost <- (price * quantity)
return(the.cost)
})
}
shinyApp(new.ui, new.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput('cost')
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost <- (price * quantity)
return(the.cost)
})
}
shinyApp(new.ui, new.server)
new.ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput('price', label = "Price ($)", value = 0, min = 0),
numericInput('quantity', label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput('cost')
)
new.server <- function(input, output){
output$cost <- renderText({
the.cost <- (input$price * input$quantity)
return(the.cost)
})
}
shinyApp(new.ui, new.server)
library(shiny)
library(ggplot2)
library(dplyr)
diamonds.sample <- sample_n(diamonds, 3000)
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('price.choice', label="Price (in dollars)", min=price.range[1], max=price.range[2], value=price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput('carat.choice', label="Carats", min=carat.range[1], max=carat.range[2], value=carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color=cut)) +
geom_point() +
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
output$table <- renderDataTable({
return(filtered())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('price.choice', label="Price (in dollars)", min=price.range[1], max=price.range[2], value=price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput('carat.choice', label="Carats", min=carat.range[1], max=carat.range[2], value=carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color=cut)) +
geom_point() +
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
output$table <- renderDataTable({
return(filtered())
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/info201/final-project')
library(shiny)
library(ggplot2)
library(dplyr)
library(shinydashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
library(leaflet)
runApp('Desktop/info201/final-project')
setwd("~/Desktop/info201/final-project")
