<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
Can change your personal information:
. By logging in to your account"),
strong("How does our site handle Do Not Track signals?"),
p("We don't honor Do Not Track signals and Do Not Track, plant cookies, or use advertising when a Do Not Track (DNT) browser mechanism is in place. We don't honor them because: We do not track anything and are not affiliated with third parties."),
strong("Does our site allow third-party behavioral tracking?"),
p("It's also important to note that we do not allow third-party behavioral tracking"),
strong("COPPA (Children Online Privacy Protection Act)"),
p("When it comes to the collection of personal information from children under the age of 13 years old, the Children's Online Privacy Protection Act (COPPA) puts parents in control. The Federal Trade Commission, United States' consumer protection agency, enforces the COPPA Rule, which spells out what operators of websites and online services must do to protect children's privacy and safety online. We do not specifically market to children under the age of 13 years old."),
strong("Fair Information Practices"),
p("The Fair Information Practices Principles form the backbone of privacy law in the United States and the concepts they include have played a significant role in the development of data protection laws around the globe. Understanding the Fair Information Practice Principles and how they should be implemented is critical to comply with the various privacy laws that protect personal information."),
strong("In order to be in line with Fair Information Practices we will take the following responsive action, should a data breach occur:"),
p("We will notify the users via in-site notification
. Within 1 business day
We also agree to the Individual Redress Principle which requires that individuals have the right to legally pursue enforceable rights against data collectors and processors who fail to adhere to the law. This principle requires not only that individuals have enforceable rights against data users, but also that individuals have recourse to courts or government agencies to investigate and/or prosecute non-compliance by data processors."),
strong("CAN SPAM Act"),
p("The CAN-SPAM Act is a law that sets the rules for commercial email, establishes requirements for commercial messages, gives recipients the right to have emails stopped from being sent to them, and spells out tough penalties for violations."),
strong("We collect your email address in order to:
To be in accordance with CANSPAM, we agree to the following:
If at any time you would like to unsubscribe from receiving future emails, you can email us at
and we will promptly remove you from ALL correspondence."),
p("Contacting Us
If there are any questions regarding this privacy policy, you may contact us using the information below.
https://github.com/CarameIMacchiato/
Mary Gates Hall
Seattle, Washington 98195
USA
gutierrezc92@yahoo.com
Last Edited on 2017-03-01")
)
)
)
)
shinyUI(ui)
=======
first_profile <- user_search$data[[1]]
user_id <- first_profile$id
## Get infos about user
user_info = fromJSON(getURL(paste('https://api.instagram.com/v1/users/',
user_id,'/?access_token=', token, sep="")),
unexpected.escape = "keep")
count_media <- user_info$data$counts$media
# Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',
user_id, '/media/recent/?access_token=', token,
sep="")))
# Data frame returning the pictures/vids & infos about them
df <- data.frame(no = 1:length(media$data))
for (i in 1:length(media$data))
{
#id
df$id[i] <- media$data[[i]]$id
#link
df$link[i] <- media$data[[i]]$link
#lat
df$lat[i] <-toString(media$data[[i]]$location$latitude)
#long
df$long[i] <- toString(media$data[[i]]$location$longitude)
#date
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time),
origin="1970-01-01"))
}
# Only keep media with geotags
df <- filter(df, lat != "")
# Create latlong variable for gvisMap
df$latlong <- paste(df$lat, df$long, sep = ":")
df
})
output$view <- renderGvis({
gvisMap(df(), locationvar = "latlong" , tipvar = "date",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
})
# Turn off progress bar ---------------------------------------------------
# progress$close()
})
runApp('Desktop')
install.packages("rjson")
runApp('Desktop')
install.packages("googleVis")
runApp('Desktop')
>>>>>>> master
=======
body <- fromJSON(content(response, "text"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
user.data <- general.data()
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
return(data)
})
output$pic <- renderImage({
user.data <- general.data()
paste(user.data$profile_pic)
})
runApp()
runApp()
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
runApp()
runApp()
paste0("img(", "", src = 'pic' ")
paste0("img(", "", src = 'pic' ")
a <- paste0("img(", "", src = 'pic' ")
a <- paste0("img(", "", "src =" 'pic' ")
a <- paste0("img(", "", "src =" 'pic')
a <- paste0("img("", src=")
a <- paste0("img(\"\", src=")
a
a <- paste0("img(\" \", src=")
a
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("leaflet")
library(leaflet)
runApp()
install.packages("leaflet")
shiny::runApp()
library(leaflet)
runApp()
install.packages("leaflet")
shiny::runApp()
library(leaflet)
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(leaflet)
install.packages("leaflet")
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
response <- GET(paste0(base.url, "users/self/?", access.token))
server <- function(input, output) {
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
return(data)
})
# for user's recent media
recent.media <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
# for more specific user data (followers, following, etc.)
specific.counts <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
map.stuff <- reactive({
media.frame <- data.frame(recent.media())
long <- if(!exists("long")) long <- media.frame$location$longitude else append( long, body.pics$data$location$longitude)
lat <- if(!exists("lat")) lat <- media.frame$location$latitude else append( lat, body.pics$data$location$latitude)
links <- if(!exists("links")) links <- (paste0("<img src=\"", media.frame$images$thumbnail$url, "\">")) else append( links, (paste0("<img src=\"", body.pics$data$images$thumbnail$url, "\">")))
captions <- if(!exists("captions")) captions <- media.frame$caption$text else append(captions, body.pics$data$caption$text)
usernames <- if(!exists("usernames")) usernames <- media.frame$user$username else append(usernames, body.pics$data$user$username)
map.info <- data.frame(long, lat, links, captions, usernames)
return(map.info)
})
# plot of filters
output$plot <- renderPlot({
filter.data <- recent.media()
ggplot(data = filter.data) +
geom_bar(mapping = aes(x = filter.data$filter, fill = filter.data$filter)) +
ggtitle("Filter Statistics") +
labs(x="Filter Name", y="# of Times Filter is Used")
})
# renders user input from search box
output$search.output <- renderText({
user.data <- general.data()
paste0("User Input: ", input$chosen.search)
})
# check for correct response for username
output$search.selected.user <- renderText({
user.data <- general.data()
paste0("Selected User: ", user.data$username)
})
# check for correct response for full name
output$search.fullname <- renderText({
user.data <- general.data()
paste0("Full name : ", user.data$full_name)
})
# check for correct response for user id
output$search.userid <- renderText({
user.data <- general.data()
paste0("User Id: ", user.data$id)
})
# check for correct response for user bio
output$search.user.bio <- renderText({
user.data <- general.data()
paste0("Bio: ", user.data$bio)
})
# Username for profile page
output$selected.user <- renderText({
user.data <- general.data()
paste(user.data$username)
})
# Count of followees for profile page
output$following <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$follows)
})
# Count of followers for profile page
output$follows <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$followed_by)
})
# Count of media count for profile page
output$media.count <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$media)
})
# Name for profile page
output$name <- renderText({
user.data <- general.data()
paste(user.data$full_name)
})
# Count of media count for profile page
output$bio <- renderText({
user.data <- general.data()
paste(user.data$bio)
})
# Profile pic for profile page # Here too.
output$pic <- renderUI({
user.data <- general.data()
tags$img(imageOutput('pic'), src = user.data$profile_pic)
})
output$maps <- renderLeaflet({
map.final <- map.stuff()
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng= map.final$long, lat= map.final$lat, popup= paste(sep = "<br>", map.final$links, paste0("<b><i>", map.final$usernames, "</i></b>"), map.final$captions),
clusterOptions = markerClusterOptions())
m  # Print the map
})
}
shinyServer(server)
install.packages("leaflet")
>>>>>>> master
library(shiny)
library(httr)
<<<<<<< HEAD
library(rjson)
library(RCurl)
library(googleVis)
library(dplyr)
load("ig_oauth_ia")
runApp('Desktop')
runApp('Desktop')
response <- GET(paste0(base.url, "users/self/?", access.token))
=======
library(jsonlite)
<<<<<<< HEAD
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
source("keys.R")
setwd("C:/Users/cmoni/Desktop/info201/final-project")
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
body$data
response <- GET(paste0(base.url, "users/self/media/recent/?", access.token))
body <- fromJSON(content(response, "text"))
body$data$filter
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
filter.bar <- ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
runApp()
runApp()
runApp()
filter.bar <- ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter)) +
ggtitle("Filter Statistics") +
labs(x="Filter Name",y="# of Times Filter is Used")
server <- function(input, output) {
output$plot <- renderPlot({
filter.bar
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/cmoni/Desktop/info201/final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
base.url <- "https://api.instagram.com/v1/"
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
body$data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(filtered)
View(filtered())
runApp()
chosen.searh <- "monmon_hi"
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", chosen.search, "&access_token=", access.token))
chosen.search <- "monmon_hi"
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", chosen.search, "&access_token=", access.token))
search.body <- fromJSON(content(search.response, "text"))
data <- search.body$data
View(data)
View(search.body)
chosen.search <- "monmon_hi"
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
data <- search.body$data
View(search.body)
view(data)
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
# Defining the UI
ui <- fluidPage(theme = "bootstrap.css",
h1("Instagram Project", class = "page-header"),
sidebarPanel(
# search for instagram user
textInput("chosen.search", strong("Search Full Username")),
p(em("Note: only works for our sandbox users", class = "text-info", class = "small"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput('maps')),
tabPanel("Statistics",
h2("Statistics"),
p("Filters are a big part of Instagram."),
plotOutput("plot")),
tabPanel("Mini Profile Page",
h3(uiOutput('pic', class = "img-thumbnail"), textOutput("selected.user", inline = TRUE), class = "well well-sm"),
tags$blockquote(p(strong("Following: "), textOutput("following", inline = TRUE), strong("Followers: "), textOutput("follows", inline = TRUE),
strong("Media Count: "), textOutput("media.count", inline = TRUE)),
p(strong("Name: "), textOutput("name", inline = TRUE)),
p(strong("Bio: "), textOutput("bio", inline = TRUE)))
),
tabPanel("Privacy Policy",
h2("Privacy Policy"),
p("This privacy policy has been compiled to better serve those who are concerned with how their 'Personally Identifiable Information' (PII) is being used online. PII, as described in US privacy law and information security, is information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context. Please read our privacy policy carefully to get a clear understanding of how we collect, use, protect or otherwise handle your Personally Identifiable Information in accordance with our website."),
strong("What personal information do we collect from the people that visit our blog, website or app?"),
p("When ordering or registering on our site, as appropriate, you may be asked to enter your Instagram Username or other details to help you with your experience."),
strong("When do we collect information?"),
p("We collect information from you when you fill out a form or enter information on our site."),
strong("How do we use your information?"),
p("We may use the information we collect from you when you register, make a purchase, sign up for our newsletter, respond to a survey or marketing communication, surf the website, or use certain other site features in the following ways:
. To personalize your experience and to allow us to deliver the type of content and product offerings in which you are most interested.
. To improve our website in order to better serve you."),
strong("How do we protect your information?"),
p("We do not use vulnerability scanning and/or scanning to PCI standards.
We only provide articles and information. We never ask for credit card numbers.
We do not use Malware Scanning.
We do not use an SSL certificate
. We only provide articles and information. We never ask for personal or private information like names, email addresses, or credit card numbers."),
strong("Do we use 'cookies'?"),
p("We do not use cookies for tracking purposes
You can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies. You do this through your browser settings. Since browser is a little different, look at your browser's Help Menu to learn the correct way to modify your cookies.
If you turn cookies off, Some of the features that make your site experience more efficient may not function properly.that make your site experience more efficient and may not function properly."),
strong("Third-party disclosure"),
p("We do not sell, trade, or otherwise transfer to outside parties your Personally Identifiable Information."),
strong("Third-party links"),
p("We do not include or offer third-party products or services on our website."),
strong("Google"),
p("Google's advertising requirements can be summed up by Google's Advertising Principles. They are put in place to provide a positive experience for users. https://support.google.com/adwordspolicy/answer/1316548?hl=en
We have not enabled Google AdSense on our site but we may do so in the future."),
strong("California Online Privacy Protection Act"),
p("CalOPPA is the first state law in the nation to require commercial websites and online services to post a privacy policy. The law's reach stretches well beyond California to require any person or company in the United States (and conceivably the world) that operates websites collecting Personally Identifiable Information from California consumers to post a conspicuous privacy policy on its website stating exactly the information being collected and those individuals or companies with whom it is being shared. - See more at: http://consumercal.org/california-online-privacy-protection-act-caloppa/#sthash.0FdRbT51.dpuf"),
strong("According to CalOPPA, we agree to the following:"),
p("Users can visit our site anonymously.
Once this privacy policy is created, we will add a link to it on our home page or as a minimum, on the first significant page after entering our website.
Our Privacy Policy link includes the word 'Privacy' and can easily be found on the page specified above.
You will be notified of any Privacy Policy changes:
. On our Privacy Policy Page
Can change your personal information:
. By logging in to your account"),
strong("How does our site handle Do Not Track signals?"),
p("We don't honor Do Not Track signals and Do Not Track, plant cookies, or use advertising when a Do Not Track (DNT) browser mechanism is in place. We don't honor them because: We do not track anything and are not affiliated with third parties."),
strong("Does our site allow third-party behavioral tracking?"),
p("It's also important to note that we do not allow third-party behavioral tracking"),
strong("COPPA (Children Online Privacy Protection Act)"),
p("When it comes to the collection of personal information from children under the age of 13 years old, the Children's Online Privacy Protection Act (COPPA) puts parents in control. The Federal Trade Commission, United States' consumer protection agency, enforces the COPPA Rule, which spells out what operators of websites and online services must do to protect children's privacy and safety online. We do not specifically market to children under the age of 13 years old."),
strong("Fair Information Practices"),
p("The Fair Information Practices Principles form the backbone of privacy law in the United States and the concepts they include have played a significant role in the development of data protection laws around the globe. Understanding the Fair Information Practice Principles and how they should be implemented is critical to comply with the various privacy laws that protect personal information."),
strong("In order to be in line with Fair Information Practices we will take the following responsive action, should a data breach occur:"),
p("We will notify the users via in-site notification
. Within 1 business day
We also agree to the Individual Redress Principle which requires that individuals have the right to legally pursue enforceable rights against data collectors and processors who fail to adhere to the law. This principle requires not only that individuals have enforceable rights against data users, but also that individuals have recourse to courts or government agencies to investigate and/or prosecute non-compliance by data processors."),
strong("CAN SPAM Act"),
p("The CAN-SPAM Act is a law that sets the rules for commercial email, establishes requirements for commercial messages, gives recipients the right to have emails stopped from being sent to them, and spells out tough penalties for violations."),
strong("We collect your email address in order to:"),
strong("To be in accordance with CANSPAM, we agree to the following:"),
p("If at any time you would like to unsubscribe from receiving future emails, you can email us at and we will promptly remove you from ALL correspondence."),
p("Contacting Us"),
p("If there are any questions regarding this privacy policy, you may contact us using the information below."),
p("https://github.com/CarameIMacchiato/"),
p("Mary Gates Hall"),
p("Seattle, Washington 98195 USA"),
p("gutierrezc92@yahoo.com"),
p("Last Edited on 2017-03-01")
)
)
)
)
shinyUI(ui)
=======
library(leaflet)
install.packages("leaflet")
# Sourcing the file with the keys in it. Access key is 'access.token'
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
# example url is https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN
# Format is base url / request / access key
# In case : 6ff7a923483441ea8b19c9ecd8b23d5a
# Get user info
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
server <- function(input, output) {
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
return(data)
})
# for user's recent media
recent.media <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
# for more specific user data (followers, following, etc.)
specific.counts <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
map.stuff <- reactive({
media.frame <- data.frame(recent.media())
long <- if(!exists("long")) long <- media.frame$location$longitude else append( long, body.pics$data$location$longitude)
lat <- if(!exists("lat")) lat <- media.frame$location$latitude else append( lat, body.pics$data$location$latitude)
links <- if(!exists("links")) links <- (paste0("<img src=\"", media.frame$images$thumbnail$url, "\">")) else append( links, (paste0("<img src=\"", body.pics$data$images$thumbnail$url, "\">")))
captions <- if(!exists("captions")) captions <- media.frame$caption$text else append(captions, body.pics$data$caption$text)
usernames <- if(!exists("usernames")) usernames <- media.frame$user$username else append(usernames, body.pics$data$user$username)
map.info <- data.frame(long, lat, links, captions, usernames)
return(map.info)
})
# plot of filters
output$plot <- renderPlot({
filter.data <- recent.media()
ggplot(data = filter.data) +
geom_bar(mapping = aes(x = filter.data$filter, fill = filter.data$filter)) +
ggtitle("Filter Statistics") +
labs(x="Filter Name", y="# of Times Filter is Used")
})
# renders user input from search box
output$search.output <- renderText({
user.data <- general.data()
paste0("User Input: ", input$chosen.search)
})
# check for correct response for username
output$search.selected.user <- renderText({
user.data <- general.data()
paste0("Selected User: ", user.data$username)
})
# check for correct response for full name
output$search.fullname <- renderText({
user.data <- general.data()
paste0("Full name : ", user.data$full_name)
})
# check for correct response for user id
output$search.userid <- renderText({
user.data <- general.data()
paste0("User Id: ", user.data$id)
})
# check for correct response for user bio
output$search.user.bio <- renderText({
user.data <- general.data()
paste0("Bio: ", user.data$bio)
})
# Username for profile page
output$selected.user <- renderText({
user.data <- general.data()
paste(user.data$username)
})
# Count of followees for profile page
output$following <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$follows)
})
# Count of followers for profile page
output$follows <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$followed_by)
})
# Count of media count for profile page
output$media.count <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$media)
})
# Name for profile page
output$name <- renderText({
user.data <- general.data()
paste(user.data$full_name)
})
# Count of media count for profile page
output$bio <- renderText({
user.data <- general.data()
paste(user.data$bio)
})
# Profile pic for profile page # Here too.
output$pic <- renderUI({
user.data <- general.data()
tags$img(imageOutput('pic'), src = user.data$profile_pic)
})
output$maps <- renderLeaflet({
map.final <- map.stuff()
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng= map.final$long, lat= map.final$lat, popup= paste(sep = "<br>", map.final$links, paste0("<b><i>", map.final$usernames, "</i></b>"), map.final$captions),
clusterOptions = markerClusterOptions())
m  # Print the map
})
}
shinyServer(server)
>>>>>>> master
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
<<<<<<< HEAD
=======
library(leaflet)
# install.packages("leaflet")
>>>>>>> master
# Sourcing the file with the keys in it. Access key is 'access.token'
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
# example url is https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN
# Format is base url / request / access key
# In case : 6ff7a923483441ea8b19c9ecd8b23d5a
# Get user info
<<<<<<< HEAD
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
body$data
# Get recent media from user
response <- GET(paste0(base.url, "users/self/media/recent/?", access.token))
body <- fromJSON(content(response, "text"))
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
=======
>>>>>>> master
response <- GET(paste0(base.url, "users/self/?", access.token))
response <- GET(paste0(base.url, "users/self/"), query=(access.token)))
response <- GET(paste0(base.url, "users/self/"), query=(access.token))
source("keys.R")
setwd("~/Desktop/INFO201AF/final-project")
source("keys.R")
response <- GET(paste0(base.url, "users/self/"), query=(access.token))
body <- fromJSON(content(response, "text"))
<<<<<<< HEAD
body$data
response <- GET(paste0(base.url, "users/self/media/recent/?", access.token))
body <- fromJSON(content(response, "text"))
response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token)))
response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token))
response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token)
body <- fromJSON(content(response, "text"))
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token)
insta.body <- fromJSON(content(response, "text"))
insta.body$data
insta.body$data$likes
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access.token, "count" = 30)
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access.token, "count" = 30)
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access.token, "count" = 30))
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list("" = access.token, "count" = 30))
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access_token = access.token, "count" = 30))
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access_token = access.token, "count" = 15))
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list("access_token" = access.token, "count" = 15))
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
insta.body$data
runApp()
insta.body$data$comments
insta.body$data$likes
insta.result <- flatten(insta.body$data$likes)
View(insta.result)
insta.result <- flatten(insta.body$data)
View(insta.result)
insta.result <- select(insta.result, created.time, likes, comments)
insta.result <- select(insta.result, created_time, likes, comments)
insta.result <- flatten(insta.body$data)
insta.result <- select(insta.result, created_time, likes, comments)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
print( date("M j, Y", insta.result$created_time))
install.packages(anytime)
library(anytime)
library(anytime)
=======
>>>>>>> master
install.packages(anytime)
library(anytime)
install.packages(anytime)
install.packages(Rcpp)
library(Rcpp)
library(Anytime)
library(anytime)
library(Anything)
install.packages("anytime")
library(anytime)
print( anytime(insta.result$created_time))
insta.result$created_time
print(anydate(insta.result$created_time))
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="UTC")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="PST")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="PDT")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="UTC")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="UTC-8:00")
Sys.timezone()
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
runApp()
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = created_time), stat_identity("like"))
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = created_time), stat_identity())
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = created_time))
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = likes.count))
insta.result <- select(insta.result, created_time, likes.count)
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = likes.count))
is.data.frame(insta.response)
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = likes.count))
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = created_time))
is.data.frame(insta.result)
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = created_time), stat_identity())
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity", width = 2.0)
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = factor(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = as.factor(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
insta.result$created_time
as.ch(insta.result)
as.character(insta.result)
as.character(insta.result)
as.character(insta.result$created_time)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
print(anydate(insta.result$created_time))
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result <- flatten(insta.body$data)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
as.character(insta.result$created_time)
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time)), y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time)), y = likes.count) +
geom_bar(stat = "identity")
as.numeric(as.character(insta.result$created_time)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.result <- flatten(insta.body$data)
as.numeric(as.character(insta.result$created_time))
as.numeric((insta.result$created_time))
(insta.result$created_time)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
round(insta.result$created_time, "hours)"
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
round(insta.result$created_time, "hours")
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
insta.result <- flatten(insta.body$data)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.ticks.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.ticks.y = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x =  = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity", fill = comments.count) +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count), , fill = comments.count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count), fill = comments.count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, , fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
insta.result$images.thumbnail.url
runApp('~/Desktop/INFO201AF/a8-data-app-jxchen16')
runApp()
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(link))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(link))
library(gist)
install.packages("gist")
install.packages(gist)
library(EBImage)  ## readImage
library(grid)     ## rasterGrob
library(ggthemes) ## theme_minimal
library(scales)
install.packages("EBImage")  ## readImage
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library("scales")
library(ggthemes) ## theme_minimal
install.packages("ggthemes") ## theme_minimal
library(ggthemes) ## theme_minimal
library(grid)     ## rasterGrob
devtools::source_gist("1d1bdb00a7b3910d62bf3eec8a77b4a7")
add_images_as_xlabels <- function(g, pics) {
## ensure that the input is a ggplot
if(!inherits(g, "ggplot")) stop("Requires a valid ggplot to attach images to.")
## extract the components of the ggplot
gb   <- ggplot_build(gg)
xpos <- gb$panel$ranges[[1]]$x.major
yrng <- gb$panel$ranges[[1]]$y.range
## ensure that the number of pictures to use for labels
## matches the number of x categories
if(length(xpos) != length(pics)) stop("Detected a different number of pictures to x categories")
## create a new grob of the images aligned to the x-axis
## at the categorical x positions
my_g <- do.call("grobTree", Map(rasterGrob, pics, x=xpos, y=0))
## annotate the original ggplot with the new grob
gg <- gg + annotation_custom(my_g,
xmin = -Inf,
xmax =  Inf,
ymax = yrng[1] + 0.25*(yrng[2]-yrng[1])/npoints,
ymin = yrng[1] - 0.50*(yrng[2]-yrng[1])/npoints)
## turn off clipping to allow plotting outside of the plot area
gg2 <- ggplotGrob(gg)
gg2$layout$clip[gg2$layout$name=="panel"] <- "off"
## produce the final, combined grob
grid.newpage()
grid.draw(gg2)
return(invisible(NULL))
}
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(images.thumbnail.url))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = tags$a(href = images.thumbnail.url, "1"))
insta.result$images.thumbnail.url
is.vector(insta.result$images.thumbnail.url)
is.list(insta.result$images.thumbnail.url)
is.data.frame(insta.result$images.thumbnail.url)
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = tags$p("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
r
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
return(g)
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
runApp()
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
insta.result$number <- 1:20
insta.result$number <- 1:nrow(insta.result)
insta.result$number <- 1:15
nrow(insta.result)
insta.result$number <- 1:nrow(insta.result)
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
insta.result$number <- nrow(insta.result):1
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20)
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("hello"))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("hello"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(h3("hello"), h2("yes"), h4("heats")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c())
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(h1("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(tags$h1("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("yes"))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("<strong> yes <strong>"))
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(    HTML('<strong> Hello World <strong>')
)
return(g)
})
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(HTML('<strong> Hello World <strong>')))
runApp()
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") + xlab("Numbers of Pictures") + ylab("count of LIKES")
runApp()
runApp()
runApp()
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") + labs(x = "Numbers of Pictures", y = ("LIKES counts"), fill = "Comments counts")
library(plotly)
install.packages("plotly")
library(plotly)
g <- ggplotly(g)
ggplotly(g)
=======
server <- function(input, output) {
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
return(data)
})
# for user's recent media
recent.media <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
# for more specific user data (followers, following, etc.)
specific.counts <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
map.stuff <- reactive({
media.frame <- data.frame(recent.media())
long <- if(!exists("long")) long <- media.frame$location$longitude else append( long, body.pics$data$location$longitude)
lat <- if(!exists("lat")) lat <- media.frame$location$latitude else append( lat, body.pics$data$location$latitude)
links <- if(!exists("links")) links <- (paste0("<img src=\"", media.frame$images$thumbnail$url, "\">")) else append( links, (paste0("<img src=\"", body.pics$data$images$thumbnail$url, "\">")))
captions <- if(!exists("captions")) captions <- media.frame$caption$text else append(captions, body.pics$data$caption$text)
usernames <- if(!exists("usernames")) usernames <- media.frame$user$username else append(usernames, body.pics$data$user$username)
map.info <- data.frame(long, lat, links, captions, usernames)
return(map.info)
})
# plot of filters
output$plot <- renderPlot({
filter.data <- recent.media()
ggplot(data = filter.data) +
geom_bar(mapping = aes(x = filter.data$filter, fill = filter.data$filter)) +
ggtitle("Filter Statistics") +
labs(x="Filter Name", y="# of Times Filter is Used")
})
# renders user input from search box
output$search.output <- renderText({
user.data <- general.data()
paste0("User Input: ", input$chosen.search)
})
# check for correct response for username
output$search.selected.user <- renderText({
user.data <- general.data()
paste0("Selected User: ", user.data$username)
})
# check for correct response for full name
output$search.fullname <- renderText({
user.data <- general.data()
paste0("Full name : ", user.data$full_name)
})
# check for correct response for user id
output$search.userid <- renderText({
user.data <- general.data()
paste0("User Id: ", user.data$id)
})
# check for correct response for user bio
output$search.user.bio <- renderText({
user.data <- general.data()
paste0("Bio: ", user.data$bio)
})
# Username for profile page
output$selected.user <- renderText({
user.data <- general.data()
paste(user.data$username)
})
# Count of followees for profile page
output$following <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$follows)
})
# Count of followers for profile page
output$follows <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$followed_by)
})
# Count of media count for profile page
output$media.count <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$media)
})
# Name for profile page
output$name <- renderText({
user.data <- general.data()
paste(user.data$full_name)
})
# Count of media count for profile page
output$bio <- renderText({
user.data <- general.data()
paste(user.data$bio)
})
# Profile pic for profile page # Here too.
output$pic <- renderUI({
user.data <- general.data()
<<<<<<< HEAD
src = user.data$profile_pic
tags$img(src = src)
})
# Creation of maps with leaflet
=======
tags$img(imageOutput('pic'), src = user.data$profile_pic)
})
>>>>>>> master
output$maps <- renderLeaflet({
map.final <- map.stuff()
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng= map.final$long, lat= map.final$lat, popup= paste(sep = "<br>", map.final$links, paste0("<b><i>", map.final$usernames, "</i></b>"), map.final$captions),
clusterOptions = markerClusterOptions())
m  # Print the map
})
}
shinyServer(server)
runApp()
<<<<<<< HEAD
runApp()
install.packages("leaflet")
runApp()
install.packages("leaflet")
runApp()
install.packages("leaflet")
runApp()
runApp()
runApp()
ui <- fluidPage(
titlePanel("Instagram Project"),
sidebarPanel(
# search for instagram user
textInput("chosen.search", "Search Full Username*"),
textOutput("search.output"),
textOutput("search.selected.user"),
textOutput("search.fullname"),
textOutput("search.userid"),
textOutput("search.user.bio"),
p(em("*Note: only works for our sandbox users"))
),
# Count of media count for profile page
output$bio <- renderText({
user.data <- general.data()
paste(user.data$bio)
})
install.packages("leaflet")
mainPanel(
navbarPage(
tabPanel("Map"),
tabPanel("Heat Map"),
tabPanel("Statistics",
h2("Statistics"),
p("Filters are a big part of Instagram."),
plotOutput("plot")),
tabPanel("Mini Profile Page"),
tabPanel("Privacy Policy",
h2("Privacy Policy"),
p("This privacy policy has been compiled to better serve those who are concerned with how their 'Personally Identifiable Information' (PII) is being used online. PII, as described in US privacy law and information security, is information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context. Please read our privacy policy carefully to get a clear understanding of how we collect, use, protect or otherwise handle your Personally Identifiable Information in accordance with our website."),
strong("What personal information do we collect from the people that visit our blog, website or app?"),
p("When ordering or registering on our site, as appropriate, you may be asked to enter your Instagram Username or other details to help you with your experience."),
strong("When do we collect information?"),
p("We collect information from you when you fill out a form or enter information on our site."),
strong("How do we use your information?"),
p("We may use the information we collect from you when you register, make a purchase, sign up for our newsletter, respond to a survey or marketing communication, surf the website, or use certain other site features in the following ways:
. To personalize your experience and to allow us to deliver the type of content and product offerings in which you are most interested.
. To improve our website in order to better serve you."),
strong("How do we protect your information?"),
p("We do not use vulnerability scanning and/or scanning to PCI standards.
We only provide articles and information. We never ask for credit card numbers.
We do not use Malware Scanning.
We do not use an SSL certificate
. We only provide articles and information. We never ask for personal or private information like names, email addresses, or credit card numbers."),
strong("Do we use 'cookies'?"),
p("We do not use cookies for tracking purposes
You can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies. You do this through your browser settings. Since browser is a little different, look at your browser's Help Menu to learn the correct way to modify your cookies.
If you turn cookies off, Some of the features that make your site experience more efficient may not function properly.that make your site experience more efficient and may not function properly."),
strong("Third-party disclosure"),
p("We do not sell, trade, or otherwise transfer to outside parties your Personally Identifiable Information."),
strong("Third-party links"),
p("We do not include or offer third-party products or services on our website."),
strong("Google"),
p("Google's advertising requirements can be summed up by Google's Advertising Principles. They are put in place to provide a positive experience for users. https://support.google.com/adwordspolicy/answer/1316548?hl=en
We have not enabled Google AdSense on our site but we may do so in the future."),
strong("California Online Privacy Protection Act"),
p("CalOPPA is the first state law in the nation to require commercial websites and online services to post a privacy policy. The law's reach stretches well beyond California to require any person or company in the United States (and conceivably the world) that operates websites collecting Personally Identifiable Information from California consumers to post a conspicuous privacy policy on its website stating exactly the information being collected and those individuals or companies with whom it is being shared. - See more at: http://consumercal.org/california-online-privacy-protection-act-caloppa/#sthash.0FdRbT51.dpuf"),
strong("According to CalOPPA, we agree to the following:"),
p("Users can visit our site anonymously.
Once this privacy policy is created, we will add a link to it on our home page or as a minimum, on the first significant page after entering our website.
Our Privacy Policy link includes the word 'Privacy' and can easily be found on the page specified above.
You will be notified of any Privacy Policy changes:
. On our Privacy Policy Page
Can change your personal information:
. By logging in to your account"),
strong("How does our site handle Do Not Track signals?"),
p("We don't honor Do Not Track signals and Do Not Track, plant cookies, or use advertising when a Do Not Track (DNT) browser mechanism is in place. We don't honor them because: We do not track anything and are not affiliated with third parties."),
strong("Does our site allow third-party behavioral tracking?"),
p("It's also important to note that we do not allow third-party behavioral tracking"),
strong("COPPA (Children Online Privacy Protection Act)"),
p("When it comes to the collection of personal information from children under the age of 13 years old, the Children's Online Privacy Protection Act (COPPA) puts parents in control. The Federal Trade Commission, United States' consumer protection agency, enforces the COPPA Rule, which spells out what operators of websites and online services must do to protect children's privacy and safety online. We do not specifically market to children under the age of 13 years old."),
strong("Fair Information Practices"),
p("The Fair Information Practices Principles form the backbone of privacy law in the United States and the concepts they include have played a significant role in the development of data protection laws around the globe. Understanding the Fair Information Practice Principles and how they should be implemented is critical to comply with the various privacy laws that protect personal information."),
strong("In order to be in line with Fair Information Practices we will take the following responsive action, should a data breach occur:"),
p("We will notify the users via in-site notification
. Within 1 business day
We also agree to the Individual Redress Principle which requires that individuals have the right to legally pursue enforceable rights against data collectors and processors who fail to adhere to the law. This principle requires not only that individuals have enforceable rights against data users, but also that individuals have recourse to courts or government agencies to investigate and/or prosecute non-compliance by data processors."),
strong("CAN SPAM Act"),
p("The CAN-SPAM Act is a law that sets the rules for commercial email, establishes requirements for commercial messages, gives recipients the right to have emails stopped from being sent to them, and spells out tough penalties for violations."),
strong("We collect your email address in order to:
To be in accordance with CANSPAM, we agree to the following:
If at any time you would like to unsubscribe from receiving future emails, you can email us at
and we will promptly remove you from ALL correspondence."),
p("Contacting Us
If there are any questions regarding this privacy policy, you may contact us using the information below.
https://github.com/CarameIMacchiato/
Mary Gates Hall
Seattle, Washington 98195
USA
gutierrezc92@yahoo.com
Last Edited on 2017-03-01")
)
)
)
)
install.packages("leaflet")
runApp()
library(leaflet)
=======
shiny::runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> master
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> master
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(jsonlite)
library(anytime)
library(httr)
library(plotly)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
