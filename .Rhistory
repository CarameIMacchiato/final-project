first_profile <- user_search$data[[1]]
user_id <- first_profile$id
## Get infos about user
user_info = fromJSON(getURL(paste('https://api.instagram.com/v1/users/',
user_id,'/?access_token=', token, sep="")),
unexpected.escape = "keep")
count_media <- user_info$data$counts$media
# Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',
user_id, '/media/recent/?access_token=', token,
sep="")))
# Data frame returning the pictures/vids & infos about them
df <- data.frame(no = 1:length(media$data))
for (i in 1:length(media$data))
{
#id
df$id[i] <- media$data[[i]]$id
#link
df$link[i] <- media$data[[i]]$link
#lat
df$lat[i] <-toString(media$data[[i]]$location$latitude)
#long
df$long[i] <- toString(media$data[[i]]$location$longitude)
#date
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time),
origin="1970-01-01"))
}
# Only keep media with geotags
df <- filter(df, lat != "")
# Create latlong variable for gvisMap
df$latlong <- paste(df$lat, df$long, sep = ":")
df
})
output$view <- renderGvis({
gvisMap(df(), locationvar = "latlong" , tipvar = "date",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
})
# Turn off progress bar ---------------------------------------------------
# progress$close()
})
runApp('Desktop')
install.packages("rjson")
runApp('Desktop')
install.packages("googleVis")
runApp('Desktop')
library(shiny)
library(httr)
library(rjson)
library(RCurl)
library(googleVis)
library(dplyr)
load("ig_oauth_ia")
runApp('Desktop')
runApp('Desktop')
response <- GET(paste0(base.url, "users/self/?", access.token))
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
# Sourcing the file with the keys in it. Access key is 'access.token'
source("keys.R")
base.url <- "https://api.instagram.com/v1/"
# example url is https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN
# Format is base url / request / access key
# In case : 6ff7a923483441ea8b19c9ecd8b23d5a
# Get user info
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
body$data
# Get recent media from user
response <- GET(paste0(base.url, "users/self/media/recent/?", access.token))
body <- fromJSON(content(response, "text"))
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
response <- GET(paste0(base.url, "users/self/?", access.token))
response <- GET(paste0(base.url, "users/self/"), query=(access.token)))
response <- GET(paste0(base.url, "users/self/"), query=(access.token))
source("keys.R")
setwd("~/Desktop/INFO201AF/final-project")
source("keys.R")
response <- GET(paste0(base.url, "users/self/"), query=(access.token))
body <- fromJSON(content(response, "text"))
body$data
response <- GET(paste0(base.url, "users/self/media/recent/?", access.token))
body <- fromJSON(content(response, "text"))
response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token)))
response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token))
response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token)
body <- fromJSON(content(response, "text"))
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = access.token)
insta.body <- fromJSON(content(response, "text"))
insta.body$data
insta.body$data$likes
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access.token, "count" = 30)
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access.token, "count" = 30)
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access.token, "count" = 30))
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list("" = access.token, "count" = 30))
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access_token = access.token, "count" = 30))
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list(access_token = access.token, "count" = 15))
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
insta.response <- GET(paste0(base.url, "users/self/media/recent/"), query = list("access_token" = access.token, "count" = 15))
insta.body <- fromJSON(content(response, "text"))
insta.body$data$likes
insta.body$data
runApp()
insta.body$data$comments
insta.body$data$likes
insta.result <- flatten(insta.body$data$likes)
View(insta.result)
insta.result <- flatten(insta.body$data)
View(insta.result)
insta.result <- select(insta.result, created.time, likes, comments)
insta.result <- select(insta.result, created_time, likes, comments)
insta.result <- flatten(insta.body$data)
insta.result <- select(insta.result, created_time, likes, comments)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
print( date("M j, Y", insta.result$created_time))
install.packages(anytime)
library(anytime)
library(anytime)
install.packages(anytime)
library(anytime)
install.packages(anytime)
install.packages(Rcpp)
library(Rcpp)
library(Anytime)
library(anytime)
library(Anything)
install.packages("anytime")
library(anytime)
print( anytime(insta.result$created_time))
insta.result$created_time
print(anydate(insta.result$created_time))
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="UTC")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="PST")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="PDT")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="UTC")
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz="UTC-8:00")
Sys.timezone()
as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
runApp()
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = created_time), stat_identity("like"))
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = created_time), stat_identity())
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = created_time))
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = likes.count))
insta.result <- select(insta.result, created_time, likes.count)
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = likes.count))
is.data.frame(insta.response)
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = likes.count))
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = created_time))
is.data.frame(insta.result)
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = created_time), stat_identity())
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity", width = 2.0)
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = factor(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = as.factor(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
insta.result$created_time
as.ch(insta.result)
as.character(insta.result)
as.character(insta.result)
as.character(insta.result$created_time)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
print(anydate(insta.result$created_time))
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result <- flatten(insta.body$data)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
as.character(insta.result$created_time)
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time)), y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time)), y = likes.count) +
geom_bar(stat = "identity")
as.numeric(as.character(insta.result$created_time)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.result <- flatten(insta.body$data)
as.numeric(as.character(insta.result$created_time))
as.numeric((insta.result$created_time))
(insta.result$created_time)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
round(insta.result$created_time, "hours)"
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
round(insta.result$created_time, "hours")
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
insta.result <- flatten(insta.body$data)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.ticks.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.ticks.y = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x =  = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity", fill = comments.count) +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count), , fill = comments.count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count), fill = comments.count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, , fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
insta.result$images.thumbnail.url
runApp('~/Desktop/INFO201AF/a8-data-app-jxchen16')
runApp()
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(link))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(link))
library(gist)
install.packages("gist")
install.packages(gist)
library(EBImage)  ## readImage
library(grid)     ## rasterGrob
library(ggthemes) ## theme_minimal
library(scales)
install.packages("EBImage")  ## readImage
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library("scales")
library(ggthemes) ## theme_minimal
install.packages("ggthemes") ## theme_minimal
library(ggthemes) ## theme_minimal
library(grid)     ## rasterGrob
devtools::source_gist("1d1bdb00a7b3910d62bf3eec8a77b4a7")
add_images_as_xlabels <- function(g, pics) {
## ensure that the input is a ggplot
if(!inherits(g, "ggplot")) stop("Requires a valid ggplot to attach images to.")
## extract the components of the ggplot
gb   <- ggplot_build(gg)
xpos <- gb$panel$ranges[[1]]$x.major
yrng <- gb$panel$ranges[[1]]$y.range
## ensure that the number of pictures to use for labels
## matches the number of x categories
if(length(xpos) != length(pics)) stop("Detected a different number of pictures to x categories")
## create a new grob of the images aligned to the x-axis
## at the categorical x positions
my_g <- do.call("grobTree", Map(rasterGrob, pics, x=xpos, y=0))
## annotate the original ggplot with the new grob
gg <- gg + annotation_custom(my_g,
xmin = -Inf,
xmax =  Inf,
ymax = yrng[1] + 0.25*(yrng[2]-yrng[1])/npoints,
ymin = yrng[1] - 0.50*(yrng[2]-yrng[1])/npoints)
## turn off clipping to allow plotting outside of the plot area
gg2 <- ggplotGrob(gg)
gg2$layout$clip[gg2$layout$name=="panel"] <- "off"
## produce the final, combined grob
grid.newpage()
grid.draw(gg2)
return(invisible(NULL))
}
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(images.thumbnail.url))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = tags$a(href = images.thumbnail.url, "1"))
insta.result$images.thumbnail.url
is.vector(insta.result$images.thumbnail.url)
is.list(insta.result$images.thumbnail.url)
is.data.frame(insta.result$images.thumbnail.url)
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = tags$p("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
r
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
return(g)
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
runApp()
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
insta.result$number <- 1:20
insta.result$number <- 1:nrow(insta.result)
insta.result$number <- 1:15
nrow(insta.result)
insta.result$number <- 1:nrow(insta.result)
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
insta.result$number <- nrow(insta.result):1
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20)
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("hello"))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("hello"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(h3("hello"), h2("yes"), h4("heats")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c())
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(h1("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(tags$h1("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("yes"))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("<strong> yes <strong>"))
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(    HTML('<strong> Hello World <strong>')
)
return(g)
})
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(HTML('<strong> Hello World <strong>')))
runApp()
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") + xlab("Numbers of Pictures") + ylab("count of LIKES")
runApp()
runApp()
runApp()
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") + labs(x = "Numbers of Pictures", y = ("LIKES counts"), fill = "Comments counts")
library(plotly)
install.packages("plotly")
library(plotly)
g <- ggplotly(g)
ggplotly(g)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
