insta.result <- select(insta.result, created_time, likes.count)
ggplot(data = insta.response) +
geom_bar(mapping = aes(x = likes.count))
is.data.frame(insta.response)
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = likes.count))
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = created_time))
is.data.frame(insta.result)
ggplot(data = insta.result) +
geom_bar(mapping = aes(x = created_time), stat_identity())
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity", width = 2.0)
ggplot(data = insta.result, aes(x = created_time, y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = factor(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = as.factor(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
insta.result$created_time
as.ch(insta.result)
as.character(insta.result)
as.character(insta.result)
as.character(insta.result$created_time)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
print(anydate(insta.result$created_time))
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result <- flatten(insta.body$data)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
as.character(insta.result$created_time)
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity", width = 10.0)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time)), y = likes.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time)), y = likes.count) +
geom_bar(stat = "identity")
as.numeric(as.character(insta.result$created_time)
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result$created_time <- as.POSIXct(as.numeric(as.character(insta.result$created_time)),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
insta.result <- flatten(insta.body$data)
as.numeric(as.character(insta.result$created_time))
as.numeric((insta.result$created_time))
(insta.result$created_time)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
insta.result <- select(insta.result, created_time, likes.count, comments.count)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
as.character(insta.result$created_time)
round(insta.result$created_time, "hours)"
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
# Get the filters used in the most recent media
body$data$filter
# Bar graph for the filters from the recent media pulled
ggplot(data = body$data) +
geom_bar(mapping = aes(x = body$data$filter))
server <- function(input, output) {
}
shinyServer(server)
round(insta.result$created_time, "hours")
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity")
insta.result <- flatten(insta.body$data)
insta.result$created_time <- as.POSIXct(as.numeric(insta.result$created_time),origin="1970-01-01",tz=Sys.timezone())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.ticks.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.ticks.y = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x =  = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count)) +
geom_bar(stat = "identity", fill = comments.count) +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count), , fill = comments.count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count), fill = comments.count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, , fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
insta.result$images.thumbnail.url
runApp('~/Desktop/INFO201AF/a8-data-app-jxchen16')
runApp()
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(link))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(link))
library(gist)
install.packages("gist")
install.packages(gist)
library(EBImage)  ## readImage
library(grid)     ## rasterGrob
library(ggthemes) ## theme_minimal
library(scales)
install.packages("EBImage")  ## readImage
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library("scales")
library(ggthemes) ## theme_minimal
install.packages("ggthemes") ## theme_minimal
library(ggthemes) ## theme_minimal
library(grid)     ## rasterGrob
devtools::source_gist("1d1bdb00a7b3910d62bf3eec8a77b4a7")
add_images_as_xlabels <- function(g, pics) {
## ensure that the input is a ggplot
if(!inherits(g, "ggplot")) stop("Requires a valid ggplot to attach images to.")
## extract the components of the ggplot
gb   <- ggplot_build(gg)
xpos <- gb$panel$ranges[[1]]$x.major
yrng <- gb$panel$ranges[[1]]$y.range
## ensure that the number of pictures to use for labels
## matches the number of x categories
if(length(xpos) != length(pics)) stop("Detected a different number of pictures to x categories")
## create a new grob of the images aligned to the x-axis
## at the categorical x positions
my_g <- do.call("grobTree", Map(rasterGrob, pics, x=xpos, y=0))
## annotate the original ggplot with the new grob
gg <- gg + annotation_custom(my_g,
xmin = -Inf,
xmax =  Inf,
ymax = yrng[1] + 0.25*(yrng[2]-yrng[1])/npoints,
ymin = yrng[1] - 0.50*(yrng[2]-yrng[1])/npoints)
## turn off clipping to allow plotting outside of the plot area
gg2 <- ggplotGrob(gg)
gg2$layout$clip[gg2$layout$name=="panel"] <- "off"
## produce the final, combined grob
grid.newpage()
grid.draw(gg2)
return(invisible(NULL))
}
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = a(images.thumbnail.url))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = tags$a(href = images.thumbnail.url, "1"))
insta.result$images.thumbnail.url
is.vector(insta.result$images.thumbnail.url)
is.list(insta.result$images.thumbnail.url)
is.data.frame(insta.result$images.thumbnail.url)
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = tags$p("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
r
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
return(g)
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
runApp()
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text("hello"))
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
runApp()
g <- ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
#theme(axis.text.x = element_blank())
scale_x_discrete(limits = 1:20)
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
insta.result$number <- 1:20
insta.result$number <- 1:nrow(insta.result)
insta.result$number <- 1:15
nrow(insta.result)
insta.result$number <- 1:nrow(insta.result)
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = as.character(created_time), y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_blank())
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
insta.result$number <- nrow(insta.result):1
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20)
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("hello"))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("hello"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(h3("hello"), h2("yes"), h4("heats")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c())
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(h1("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(tags$h1("yes")))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("yes"))
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c("<strong> yes <strong>"))
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(    HTML('<strong> Hello World <strong>')
)
return(g)
})
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = 1:20, labels = c(HTML('<strong> Hello World <strong>')))
runApp()
runApp()
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity")
g <- ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") + xlab("Numbers of Pictures") + ylab("count of LIKES")
runApp()
runApp()
runApp()
ggplot(data = insta.result, aes(x = number, y = likes.count, fill = comments.count)) +
geom_bar(stat = "identity") + labs(x = "Numbers of Pictures", y = ("LIKES counts"), fill = "Comments counts")
library(plotly)
install.packages("plotly")
library(plotly)
g <- ggplotly(g)
ggplotly(g)
=======
server <- function(input, output) {
# for general data on user (i.e. username, full name, user id, bio, etc.)
general.data <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
return(data)
})
# for user's recent media
recent.media <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
media.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/media/recent/?", access.token))
media.body <- fromJSON(content(media.response, "text"))
media.data <- media.body$data
return(media.data)
})
# for more specific user data (followers, following, etc.)
specific.counts <- reactive({
search.response <- GET(paste0("https://api.instagram.com/v1/users/search?q=", input$chosen.search, "&", access.token))
search.body <- fromJSON(content(search.response, "text"))
# gets data of searched user
data <- search.body$data
user.id <- data$id
specific.response <- GET(paste0("https://api.instagram.com/v1/users/", user.id, "/?", access.token))
specific.body <- fromJSON(content(specific.response, "text"))
specific.data <- specific.body$data
specific.counts <- specific.data$counts
return(specific.counts)
})
map.stuff <- reactive({
media.frame <- data.frame(recent.media())
long <- if(!exists("long")) long <- media.frame$location$longitude else append( long, body.pics$data$location$longitude)
lat <- if(!exists("lat")) lat <- media.frame$location$latitude else append( lat, body.pics$data$location$latitude)
links <- if(!exists("links")) links <- (paste0("<img src=\"", media.frame$images$thumbnail$url, "\">")) else append( links, (paste0("<img src=\"", body.pics$data$images$thumbnail$url, "\">")))
captions <- if(!exists("captions")) captions <- media.frame$caption$text else append(captions, body.pics$data$caption$text)
usernames <- if(!exists("usernames")) usernames <- media.frame$user$username else append(usernames, body.pics$data$user$username)
map.info <- data.frame(long, lat, links, captions, usernames)
return(map.info)
})
# plot of filters
output$plot <- renderPlot({
filter.data <- recent.media()
ggplot(data = filter.data) +
geom_bar(mapping = aes(x = filter.data$filter, fill = filter.data$filter)) +
ggtitle("Filter Statistics") +
labs(x="Filter Name", y="# of Times Filter is Used")
})
# renders user input from search box
output$search.output <- renderText({
user.data <- general.data()
paste0("User Input: ", input$chosen.search)
})
# check for correct response for username
output$search.selected.user <- renderText({
user.data <- general.data()
paste0("Selected User: ", user.data$username)
})
# check for correct response for full name
output$search.fullname <- renderText({
user.data <- general.data()
paste0("Full name : ", user.data$full_name)
})
# check for correct response for user id
output$search.userid <- renderText({
user.data <- general.data()
paste0("User Id: ", user.data$id)
})
# check for correct response for user bio
output$search.user.bio <- renderText({
user.data <- general.data()
paste0("Bio: ", user.data$bio)
})
# Username for profile page
output$selected.user <- renderText({
user.data <- general.data()
paste(user.data$username)
})
# Count of followees for profile page
output$following <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$follows)
})
# Count of followers for profile page
output$follows <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$followed_by)
})
# Count of media count for profile page
output$media.count <- renderText({
follow.counts <- specific.counts()
paste(follow.counts$media)
})
# Name for profile page
output$name <- renderText({
user.data <- general.data()
paste(user.data$full_name)
})
# Count of media count for profile page
output$bio <- renderText({
user.data <- general.data()
paste(user.data$bio)
})
# Profile pic for profile page # Here too.
output$pic <- renderUI({
user.data <- general.data()
tags$img(imageOutput('pic'), src = user.data$profile_pic)
})
output$maps <- renderLeaflet({
map.final <- map.stuff()
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng= map.final$long, lat= map.final$lat, popup= paste(sep = "<br>", map.final$links, paste0("<b><i>", map.final$usernames, "</i></b>"), map.final$captions),
clusterOptions = markerClusterOptions())
m  # Print the map
})
}
shinyServer(server)
runApp()
shiny::runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> master
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(jsonlite)
library(anytime)
library(httr)
library(plotly)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
response <- GET(paste0(base.url, "users/self/?", access.token))
body <- fromJSON(content(response, "text"))
shiny::runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(httr)
library(jsonlite)
library(plotly)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
